<?xml version="1.0"?>
<doc>
<assembly>
<name>
LogiBlocks_Server
</name>
</assembly>
<members>
<member name="T:LogiBlocks_Server.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:LogiBlocks_Server.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:LogiBlocks_Server.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:LogiBlocks_Server.My.Resources.Resources.BG">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:LogiBlocks_Server.My.Resources.Resources.Icon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:LogiBlocks_Server.My.Resources.Resources.Index">
<summary>
  Looks up a localized string similar to &lt;!DOCTYPE html&gt;


&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=windows-1252&quot;&gt;
    &lt;meta http-equiv=&quot;Cache-Control: max-age=0, must-revalidate&quot; content=&quot;public&quot;&gt;
    &lt;title&gt;Dark Nebula&lt;/title&gt;
&lt;/head&gt;
&lt;body oncontextmenu=&quot;return false&quot;&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        body {
            margin-top: 0px;
            margin-bottom: 0px;
            margin-left: 0px;
            margin-right: 0px;
            padding: 0;
            overflow: hidden;
       [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:LogiBlocks_Server.My.Resources.Resources.server">
<summary>
  Looks up a localized string similar to var http = require(&apos;http&apos;);
var fs = require(&apos;fs&apos;);
var url = require(&apos;url&apos;);
var os = require(&apos;os&apos;);
var clientids = 0
var interfaces = os.networkInterfaces();
var addresses = [];
for (var k in interfaces) {
    for (var k2 in interfaces[k]) {
        var address = interfaces[k][k2];
        if (address.family === &apos;IPv4&apos; &amp;&amp; !address.internal) {
            addresses.push(address.address);
        }
    }
}
var portnum = 8081
var serverip = addresses.toString()
// Create a server
http.createServer( function [rest of string was truncated]&quot;;.
</summary>
</member>
</members>
</doc>
